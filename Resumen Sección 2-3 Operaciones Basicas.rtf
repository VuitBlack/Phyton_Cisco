En OPERACIONES BÁSICAS + - * y **

Recuerda: Es posible formular las siguientes reglas con base en los resultados:

Cuando ambos ** argumentos son enteros, el resultado es entero, también;
Cuando al menos un ** argumento es flotante, el resultado también es flotante.
Esta es una distinción importante que se debe recordar.

En la división el resultado siempre es flotante, si se necesita que el resultado séa un entero hay que usar // (doble diagonal)

RESIDUO O MÓDULO DE LA DIVISIÓN %

14 // 4 da como resultado un 3 → esta es la parte entera, es decir el cociente;
3 * 4 da como resultado 12 → como resultado de la multiplicación entre el cociente y el divisor;
14 - 12 da como resultado 2 → este es el residuo.

JERARQUÍA DE PRIORIDADES EN LAS OPERACIONES
Python define la jerarquía de todos los operadores, y asume que los operadores de mayor jerarquía deben realizar sus operaciones antes que los de menor jerarquía.
Excepto el operador de exponenciación utiliza enlazado del lado derecho al izquierdo.

LISTA DE PRIORIDADES
1 - Exponente **
2 - Cambio de signo (operadores unarios) + -
3 - Multiplicación Division y resto * / // %
4 - Suma y Resta + -

PARÉNTESIS
De acuerdo con las reglas aritméticas, las sub-expresiones dentro de los paréntesis siempre se calculan primero.


Puntos Clave
1. Una expresión es una combinación de valores (o variables, operadores, llamadas a funciones, aprenderás de ello pronto) las cuales son evaluadas y dan como resultado un valor, por ejemplo, 1 + 2.

2. Los operadores son símbolos especiales o palabras clave que son capaces de operar en los valores y realizar operaciones matemáticas, por ejemplo, el * multiplica dos valores: x * y.

3. Los operadores aritméticos en Python: + (suma), - (resta), * (multiplicación), / (división clásica: regresa un flotante siempre), % (módulo: divide el operando izquierdo entre el operando derecho y regresa el residuo de la operación, por ejemplo, 5 % 2 = 1), ** (exponenciación: el operando izquierdo se eleva a la potencia del operando derecho, por ejemplo, 2 ** 3 = 2 * 2 * 2 = 8), // (división entera: retorna el número resultado de la división, pero redondeado al número entero inferior más cercano, por ejemplo, 3 // 2.0 = 1.0)

4. Un operador unario es un operador con solo un operando, por ejemplo, -1, o +3.

5. Un operador binario es un operador con dos operandos, por ejemplo, 4 + 5, o 12 % 5.

6. Algunos operadores actúan antes que otros, a esto se le llama - jerarquía de prioridades:

El operador ** (exponencial) tiene la prioridad más alta;
Posteriormente los operadores unarios + y - (nota: los operadores unarios a la derecha del operador exponencial enlazan con mayor fuerza, por ejemplo 4 ** -1 es igual a 0.25)
Después *, /, //, y %,
Finalmente, la prioridad más baja: los operadores binarios + y -.
7. Las sub-expresiones dentro de paréntesis siempre se calculan primero, por ejemplo,  15 - 1 * ( 5 *( 1 + 2 ) ) = 0.

8. Los operadores de exponenciación utilizan enlazado del lado derecho, por ejemplo, 2 ** 2 ** 3 = 256.

